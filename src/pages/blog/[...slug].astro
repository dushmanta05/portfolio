---
import { type CollectionEntry, getCollection } from 'astro:content';

import BaseLayout from '@layouts/BaseLayout.astro';
import Icon from '@components/Icon.astro';
import GradientPlaceholder from '@components/GradientPlaceholder.astro';
import ContactCTA from '@components/ContactCTA.astro';
import SectionDivider from '@components/common/SectionDivider.astro';

interface Props {
  entry: CollectionEntry<'blog'>;
}

export async function getStaticPaths() {
  const blog = await getCollection('blog');
  return blog.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

const formatDate = (date: Date) => {
  const months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
  ];
  const month = months[date.getMonth()];
  const day = date.getDate();
  const year = date.getFullYear();
  return `${month} ${day}, ${year}`;
};

const formattedDate = formatDate(new Date(entry.data.publishDate));

const seoTitle = entry.data.seoTitle || entry.data.title;
const seoDescription = entry.data.seoDescription || entry.data.description;
const ogImage = entry.data.ogImage || entry.data.img;

const tocHeadings = headings.filter((h) => h.depth <= 3);
const showToc = tocHeadings.length > 0;
---

<BaseLayout title={seoTitle} description={seoDescription} image={ogImage}>
  <div class='wrapper gap-15'>
    <header class='article-header'>
      <div class='stack gap-4'>
        <a class='back-link' href='/blog/'>
          <Icon icon='arrowLeft' /> Blog
        </a>

        <div class='article-info'>
          <h1 class='article-title'>{entry.data.title}</h1>
          <div class='article-meta'>
            <time class='publish-date'>{formattedDate}</time>
            <div class='tags'>
              {entry.data.tags.map((t) => <span class='tag'>#{t}</span>)}
            </div>
            <!-- <div class='tags'>
              {entry.data.tags.map((t) => <a href={`/tags/${t}`} class="tag">#{t}</a>)}
            </div> -->
          </div>
          <p class='article-description'>{entry.data.description}</p>
        </div>
      </div>
    </header>

    <main>
      <div class=''>
        <div class='content-layout'>
          <div class='main-content'>
            <div class='stack gap-10 content'>
              <div class='featured-image-container'>
                {
                  entry.data.img ? (
                    <img
                      src={entry.data.img}
                      alt={entry.data.img_alt || entry.data.title}
                      class='featured-image'
                    />
                  ) : (
                    <div class='gradient-wrapper'>
                      <GradientPlaceholder
                        title={entry.data.title}
                        size='large'
                        alt={entry.data.img_alt || entry.data.title}
                      />
                    </div>
                  )
                }
              </div>
              <div class='prose'>
                <Content />
              </div>
            </div>
          </div>

          <!-- Table of Contents -->
          {
            showToc && (
              <aside class='toc-sidebar'>
                <div class='toc-container'>
                  <nav class='toc'>
                    <h3>Table of Contents</h3>
                    <ul>
                      {tocHeadings.map((heading) => (
                        <li class={`toc-level-${heading.depth}`}>
                          <a href={`#${heading.slug}`}>{heading.text}</a>
                        </li>
                      ))}
                    </ul>
                  </nav>
                </div>
              </aside>
            )
          }
        </div>
      </div>
    </main>
    <SectionDivider />
    <ContactCTA />
  </div>
</BaseLayout>

<style>
  .article-header {
    padding: 2rem 0 2rem;
    border-bottom: 1px solid var(--gray-800);
    width: 100%;
    margin-bottom: 2rem;
    max-width: 100%;
  }

  .wrapper {
    max-width: 80rem;
    margin: 0 auto;
    padding: 0 1rem;
  }

  @media (min-width: 768px) {
    .wrapper {
      padding: 0 2rem;
    }
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0;
    border-radius: 0.5rem;
    transition: background-color 0.2s ease;
    text-decoration: none;
    color: var(--gray-300);
  }

  .back-link:hover {
    color: var(--gray-0);
  }

  .article-info {
    text-align: center;
    max-width: 95ch;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .article-title {
    font-size: 2rem;
    font-weight: 700;
    line-height: 1.2;
    color: var(--gray-0);
    margin-bottom: 1rem;
    max-width: 85ch;
    margin-left: auto;
    margin-right: auto;
  }

  @media (min-width: 768px) {
    .article-title {
      font-size: 2.5rem;
      line-height: 1.1;
    }
  }

  .article-meta {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    margin-bottom: 1rem;
    padding: 1.5rem;
    max-width: 80ch;
  }

  @media (min-width: 768px) {
    .article-meta {
      flex-direction: row;
      text-align: left;
      justify-content: center;
    }
  }

  .publish-date {
    font-size: var(--text-md);
    color: var(--gray-400);
    font-family: var(--font-brand);
    font-weight: 500;
    order: -1;
  }

  @media (min-width: 768px) {
    .publish-date {
      order: 0;
    }
  }

  .tags {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    max-width: 100%;
  }

  @media (min-width: 768px) {
    .tags {
      max-width: 60ch;
    }
  }

  .tag {
    color: var(--accent-regular);
    font-size: var(--text-md);
    font-weight: 500;
    text-decoration: none;
  }

  .tag:hover {
    color: var(--accent-dark, #0066cc);
    text-decoration: underline;
  }

  .article-description {
    font-size: 1.15rem;
    line-height: 1.7;
    color: var(--gray-200);
    text-align: center;
    max-width: 70ch;
    margin: 0 auto;
  }

  @media (min-width: 768px) {
    .article-description {
      font-size: 1.25rem;
      line-height: 1.7;
    }
  }

  .featured-image-container {
    width: 100%;
    max-width: 1000px;
    margin: 0 auto 3rem auto;
    border-radius: 1rem;
    overflow: hidden;
  }

  @media (min-width: 768px) {
    .featured-image-container {
      border-radius: 1.5rem;
    }
  }

  .featured-image {
    width: 100%;
    height: 250px;
    object-fit: cover;
  }

  @media (min-width: 768px) {
    .featured-image {
      height: 400px;
    }
  }

  @media (min-width: 1024px) {
    .featured-image {
      height: 450px;
    }
  }

  .gradient-wrapper {
    width: 100%;
    height: 250px;
    position: relative;
    border-radius: 1rem;
    overflow: hidden;
  }

  @media (min-width: 768px) {
    .gradient-wrapper {
      height: 400px;
      border-radius: 1.5rem;
    }
  }

  @media (min-width: 1024px) {
    .gradient-wrapper {
      height: 450px;
    }
  }

  .featured-image-container :global(.gradient-placeholder) {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 1.5rem;
    margin: 0 auto;
  }

  .content-layout {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  @media (min-width: 1024px) {
    .content-layout {
      flex-direction: row;
      gap: 3rem;
    }
  }

  .main-content {
    flex: 1;
    min-width: 0;
  }

  /* Table of Contents */
  .toc-sidebar {
    width: 280px;
  }

  @media (max-width: 1023px) {
    .toc-sidebar {
      width: 100%;
      display: none;
    }
  }

  .toc-container {
    position: relative;
    transition: none;
  }

  @media (min-width: 1024px) {
    .toc-container {
      max-height: calc(100vh - 4rem);
      overflow-y: auto;
    }

    .toc-container.is-fixed {
      max-height: calc(100vh - 6rem);
      overflow-y: auto;
      backdrop-filter: blur(10px);
    }

    .toc-container.is-fixed .toc {
      border: 1px solid var(--gray-700);
    }
  }

  .toc {
    background: var(--gray-900);
    border: 1px solid var(--gray-800);
    border-radius: 0.75rem;
    padding: 1.5rem;
  }

  .toc h3 {
    font-size: 1rem;
    font-weight: 600;
    color: var(--gray-0);
    margin-bottom: 1rem;
  }

  .toc ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc li {
    margin-bottom: 0.5rem;
  }

  .toc a {
    color: var(--gray-300);
    text-decoration: none;
    font-size: 0.9rem;
    line-height: 1.4;
    display: block;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .toc-level-1 {
    padding-left: 0;
  }

  .toc-level-1 a {
    font-weight: 600;
    font-size: 0.95rem;
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    margin: 0.25rem 0;
    position: relative;
    border-left: 3px solid transparent;
  }

  .toc-level-2 {
    padding-left: 1rem;
  }

  .toc-level-2 a {
    font-weight: 600;
    padding: 0.4rem 0.75rem;
    border-radius: 0.375rem;
    margin: 0.2rem 0;
    position: relative;
    border-left: 2px solid transparent;
  }

  .toc-level-3 {
    padding-left: 2rem;
  }

  .toc-level-3 a {
    font-weight: 400;
    padding: 0.35rem 0.75rem;
    border-radius: 0.375rem;
    margin: 0.15rem 0;
    position: relative;
    border-left: 2px solid transparent;
    font-size: 0.85rem;
    opacity: 0.9;
  }

  /* Active states */
  .toc a.active,
  .toc a.active:link,
  .toc a.active:visited {
    background: var(--accent-regular);
    color: var(--accent-text-over);
    border-left-color: var(--accent-regular);
    transform: translateX(4px);
    box-shadow: 0 2px 8px rgba(var(--accent-regular-rgb), 0.2);
  }

  /* Hover states */
  .toc a:hover {
    background: var(--gray-800);
    color: var(--accent-regular);
    transform: translateX(6px);
    border-left-color: var(--accent-regular);
  }

  :global(html.light) .toc a:hover {
    background: var(--gray-200);
  }

  .toc a.active:hover {
    background: var(--accent-regular);
    color: var(--accent-text-over);
  }

  :global(html.light) .toc a.active:hover {
    background: var(--accent-dark);
  }

  /* Enhanced Prose Styles */
  .prose {
    max-width: 75ch;
    font-size: var(--text-lg);
    line-height: 1.7;
    color: var(--gray-100);
  }

  .prose > :global(* + *) {
    margin-top: 2rem;
  }

  /* Headings */
  .prose :global(h1) {
    color: var(--gray-0);
    font-size: 1.875em;
    font-weight: 700;
    line-height: 1.2;
    border-bottom: 2px solid var(--accent-regular);
    padding-bottom: 0.5rem;
    margin-top: 3rem;
    margin-bottom: 1.5rem;
  }

  .prose :global(h2) {
    color: var(--gray-0);
    font-size: 1.5em;
    font-weight: 600;
    line-height: 1.3;
    border-bottom: 1px solid var(--gray-700);
    padding-bottom: 0.3rem;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
  }

  .prose :global(h3) {
    color: var(--gray-0);
    font-size: 1.25em;
    font-weight: 600;
    line-height: 1.4;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
  }

  .prose :global(h4) {
    color: var(--gray-100);
    font-size: 1.125em;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
  }

  /* Fixed Blockquote Styles */
  .prose :global(blockquote) {
    border-left: 4px solid var(--accent-regular);
    margin: 2rem 0;
    padding: 1rem 1.5rem;
    background: var(--gray-900);
    border-radius: 0.5rem;
    font-style: italic;
    font-size: 1rem;
    line-height: 1.6;
  }

  .prose :global(blockquote p) {
    margin: 0;
    color: var(--gray-200);
    font-size: inherit;
  }

  .prose :global(blockquote *:first-child) {
    margin-top: 0;
  }

  .prose :global(blockquote *:last-child) {
    margin-bottom: 0;
  }

  /* Code blocks with theme support */
  .prose :global(pre) {
    border: 1px solid var(--gray-800);
    border-radius: 0.75rem;
    padding: 1.5rem;
    overflow-x: auto;
    margin: 2rem 0;
    font-size: 0.9em;
    line-height: 1.5;
    background: var(--shiki-light-bg) !important;
    transition: background-color var(--theme-transition);
  }

  :global(.theme-dark) .prose :global(pre) {
    background: var(--shiki-dark-bg) !important;
  }

  .prose :global(code) {
    font-family: 'JetBrains Mono', 'Fira Code', 'Cascadia Code', monospace;
  }

  .prose :global(:not(pre) > code) {
    background: var(--gray-800);
    color: var(--accent-regular);
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
    font-size: 0.9em;
    font-weight: 500;
  }

  /* Lists */
  .prose :global(ul),
  .prose :global(ol) {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }

  .prose :global(ul) {
    list-style-type: disc;
  }

  .prose :global(ol) {
    list-style-type: decimal;
  }

  .prose :global(li) {
    margin: 0.75rem 0;
    line-height: 1.6;
    display: list-item;
  }

  .prose :global(li::marker) {
    color: var(--accent-regular);
  }

  .prose :global(li > p) {
    margin: 0.5rem 0;
  }

  .prose :global(ul ul),
  .prose :global(ol ol) {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
  }

  /* Links */
  .prose :global(a) {
    color: var(--accent-regular);
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
    border-bottom: 1px solid transparent;
  }

  .prose :global(a:hover) {
    color: var(--accent-dark);
    border-bottom-color: var(--accent-regular);
  }

  /* Images */
  .prose :global(img) {
    width: 100%;
    height: auto;
    border-radius: 0.75rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--gray-800);
    margin: 2rem 0;
  }

  /* Tables */
  .prose :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
    font-size: 0.9em;
  }

  .prose :global(th),
  .prose :global(td) {
    border: 1px solid var(--gray-700);
    padding: 0.75rem;
    text-align: left;
  }

  .prose :global(th) {
    background: var(--gray-800);
    font-weight: 600;
    color: var(--gray-0);
  }

  /* Horizontal rule */
  .prose :global(hr) {
    border: none;
    height: 1px;
    background: var(--gray-700);
    margin: 3rem 0;
  }

  @media (max-width: 1023px) {
    .toc {
      margin-bottom: 2rem;
    }
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .prose {
      font-size: var(--text-base);
    }

    .prose :global(h1) {
      font-size: 1.625em;
    }

    .prose :global(h2) {
      font-size: 1.375em;
    }

    .prose :global(h3) {
      font-size: 1.125em;
    }

    .prose :global(h4) {
      font-size: 1em;
    }

    .article-header {
      padding: 2rem 0 3rem;
    }

    .article-meta {
      margin: 1.5rem;
      padding: 1.25rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll<HTMLImageElement>('.featured-image');
    images.forEach((img) => {
      img.addEventListener('error', () => {
        const container = img.parentElement;
        const placeholder = document.createElement('div');
        placeholder.className = 'gradient-wrapper';
        placeholder.innerHTML = `
      <div class="gradient-placeholder">
        <div class="placeholder-content">
          <div class="placeholder-text">${img.alt || 'Blog Image'}</div>
        </div>
      </div>
    `;
        container?.replaceChild(placeholder, img);
      });
    });

    const tocContainer = document.querySelector('.toc-container') as HTMLElement;
    const tocSidebar = document.querySelector('.toc-sidebar') as HTMLElement;
    const tocLinks = document.querySelectorAll('.toc a');
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6') as NodeListOf<HTMLElement>;

    if (!tocContainer || !tocSidebar || tocLinks.length === 0) return;

    let initialTocTop = 0;
    let isSticky = false;
    let isInitialized = false;

    const reset = () => {
      tocContainer.classList.remove('is-fixed');
      tocContainer.style.position = '';
      tocContainer.style.top = '';
      tocContainer.style.width = '';
      tocContainer.style.zIndex = '';
    };

    const calculate = () => {
      if (window.innerWidth >= 1024) {
        reset();
        void tocContainer.offsetHeight;
        const rect = tocContainer.getBoundingClientRect();
        initialTocTop = rect.top + window.scrollY;
      }
    };

    const updateActive = () => {
      let current = '';
      const pos = window.scrollY + 150;

      headings.forEach((h) => {
        if (h.id && h.offsetTop <= pos) {
          current = h.id;
        }
      });

      tocLinks.forEach((a) => {
        const id = a.getAttribute('href')?.substring(1);
        a.classList.toggle('active', id === current);
      });
    };

    const onScroll = () => {
      if (!isInitialized) return;

      updateActive();

      if (window.innerWidth >= 1024 && initialTocTop > 0) {
        const stickyTop = 64 + 32;
        const shouldStick = window.scrollY + stickyTop >= initialTocTop;

        if (shouldStick && !isSticky) {
          isSticky = true;
          tocContainer.classList.add('is-fixed');
          tocContainer.style.position = 'fixed';
          tocContainer.style.top = `${stickyTop}px`;
          tocContainer.style.width = '280px';
          tocContainer.style.zIndex = '10';
        } else if (!shouldStick && isSticky) {
          isSticky = false;
          reset();
        }
      } else if (isSticky) {
        isSticky = false;
        reset();
      }
    };

    const init = () => {
      calculate();
      isInitialized = true;
      onScroll();
    };

    const handleResize = () => {
      isSticky = false;
      reset();
      setTimeout(() => {
        calculate();
        updateActive();
      }, 100);
    };

    tocLinks.forEach((a) => {
      a.addEventListener('click', (e) => {
        e.preventDefault();
        const href = a.getAttribute('href');
        if (href) {
          const id = href.substring(1);
          const el = document.getElementById(id);
          if (el) {
            window.scrollTo({
              top: el.offsetTop - 100,
              behavior: 'smooth',
            });
          }
        }
      });
    });

    let ticking = false;
    const throttle = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          onScroll();
          ticking = false;
        });
        ticking = true;
      }
    };

    const initializeWhenReady = () => {
      if (document.readyState === 'complete') {
        setTimeout(() => {
          init();
        }, 150);
      } else {
        window.addEventListener('load', () => {
          setTimeout(() => {
            init();
          }, 150);
        });
      }
    };

    initializeWhenReady();

    window.addEventListener('scroll', throttle);
    window.addEventListener('resize', handleResize);
  });

  if (document.readyState !== 'loading') {
    document.dispatchEvent(new Event('DOMContentLoaded'));
  }
</script>
