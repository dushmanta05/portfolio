---
import { type CollectionEntry, getCollection } from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import GradientPlaceholder from '../../components/GradientPlaceholder.astro';

interface Props {
  entry: CollectionEntry<'blog'>;
}

export async function getStaticPaths() {
  const blog = await getCollection('blog');
  return blog.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

function isValidImageUrl(url: string) {
  return url?.startsWith('https://');
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class='stack gap-20'>
    <div class='stack gap-15'>
      <header class='pb-10 border-b border-gray-800'>
        <div class='wrapper stack gap-2'>
          <a class='back-link' href='/blog/'><Icon icon='arrowLeft' /> Blog</a>

          <div class="featured-image-container">
            <div class="gradient-wrapper">
              <GradientPlaceholder
                title={entry.data.title}
                size="large"
                alt={entry.data.img_alt || entry.data.title}
              />
            </div>
          </div>

          <Hero title={entry.data.title} align='center'>
            <div class='details'>
              <div class='tags'>
                {entry.data.tags.map((t) => <Pill>{t}</Pill>)}
              </div>
              <p class='description'>{entry.data.description}</p>
            </div>
          </Hero>
        </div>
      </header>

      <main class='wrapper'>
        <div class='stack gap-10 content'>
          <div class='content'>
            <Content />
          </div>
        </div>
      </main>
    </div>
    <ContactCTA />
  </div>
</BaseLayout>

<style>

  .content :global(pre) {
    background-color: var(--background-code);
    border: 1px solid var(--code-border);
    padding: 1.5rem;
    border-radius: 4px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .content :global(code) {
    font-family: 'JetBrains Mono', 'Fira Code', monospace;
    font-size: 0.9em;
  }

  .content :global(:not(pre) > code) {
    background: var(--background-code);
    color: var(--text-normal);
    padding: 0.2em 0.4em;
    border-radius: 4px;
    border: 1px solid var(--code-border);
  }

  .content :global(h1) {
    color: var(--text-heading);
    font-size: 2.5em;
    border-bottom: 2px solid var(--border-color);
    padding-bottom: 0.3em;
    margin-top: 2em;
  }

  .content :global(h2) {
    color: var(--text-heading);
    font-size: 2em;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 0.2em;
    margin-top: 1.5em;
  }

  .content :global(h3) {
    color: var(--text-heading);
    font-size: 1.5em;
    margin-top: 1.2em;
  }

  .content :global(ol) {
  color: var(--text-list);
  margin: 2rem 0;
  list-style-type: decimal;
  list-style-position: outside;
}

  .content :global(ul) {
  color: var(--text-list);
  margin: 2rem 0;
  list-style-type: disc;
  list-style-position: outside;
}

  .content :global(li) {
    color: var(--text-list);
    margin: 1rem 0;
    display: list-item;
  }

  .content :global(ul > li::marker),
  .content :global(ol > li::marker) {
    color: var(--text-list);
  }

  .content :global(a) {
    color: var(--link-color);
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-color 0.2s ease;
  }

  .content :global(a:hover) {
    border-bottom-color: var(--link-color);
  }

  .content :global(blockquote) {
    border-left: 4px solid var(--border-color);
    margin: 1em 0;
    padding: 0.5em 1em;
    background-color: var(--background-code);
    color: var(--text-muted);
  }

  .content :global(ul),
  .content :global(ol) {
    padding-left: 1.5em;
    color: var(--text-normal);
  }

  .content :global(li) {
    margin: 0.5em 0;
  }

  header {
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--gray-800);
    margin-bottom: 2rem;
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    transition: background-color 0.2s ease;
  }

  .details {
    display: flex;
    flex-direction: column;
    padding: 0.5rem;
    gap: 1.5rem;
    justify-content: space-between;
    align-items: center;
  }

  .featured-image-container {
    width: 100%;
    max-width: 900px;
    margin: 2rem auto;
  }

  .gradient-wrapper {
    width: 100%;
    height: 400px;
    position: relative;
    border-radius: 1.5rem;
    overflow: hidden;
  }

  .featured-image-container :global(.gradient-placeholder) {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 1.5rem;
    margin: 0 auto;
  }

  .tags {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .content {
    max-width: 90ch;
    margin-inline: auto;
    font-size: var(--text-lg);
  }

  .description {
    font-size: var(--text-md);
    max-width: 75ch;
  }

  .content > :global(* + *) {
    margin-top: 2rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(img) {
    width: 100%;
    height: auto;
    border-radius: 1.5rem;
    box-shadow: var(--shadow-sm);
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
  }

  .content :global(blockquote) {
    font-size: var(--text-lg);
    font-family: var(--font-brand);
    font-weight: 600;
    line-height: 1.1;
    padding-inline-start: 1.5rem;
    border-inline-start: 0.25rem solid var(--accent-dark);
    color: var(--gray-0);
  }

  .back-link,
  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  @media (min-width: 50em) {
    .back-link {
      display: block;
      align-self: flex-start;
    }

    .content :global(blockquote) {
      font-size: var(--text-2xl);
    }

    .wrapper.stack.gap-2 {
      padding: 3rem 2rem;
    }

    details {
      flex-direction: row;
      padding: 1.5rem 0;
      gap: 3rem;
    }

    .description {
      font-size: var(--text-xl);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      img.addEventListener('error', () => {
        img.src = '/fallback-image.jpg';
        img.alt = 'Image failed to load';
      });
    });
  });
</script>
