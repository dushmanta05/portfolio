---
import { type CollectionEntry, getCollection } from 'astro:content';

import BaseLayout from '@layouts/BaseLayout.astro';
import ContactCTA from '@components/ContactCTA.astro';
import Icon from '@components/Icon.astro';
import Pill from '@components/Pill.astro';
import GradientPlaceholder from '@components/GradientPlaceholder.astro';

interface Props {
  entry: CollectionEntry<'work'>;
}

export async function getStaticPaths() {
  const work = await getCollection('work');
  return work.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class='stack gap-20'>
    <div class='stack gap-15'>
      <header class='project-header'>
        <div class='wrapper stack gap-4'>
          <a class='back-link' href='/work/'>
            <Icon icon='arrowLeft' /> Work
          </a>

          <div class='project-info'>
            <h1 class='project-title'>{entry.data.title}</h1>
            <div class='tags'>
              {entry.data.tags.map((t) => <Pill>{t}</Pill>)}
            </div>
            <p class='project-description'>{entry.data.description}</p>
          </div>
        </div>
      </header>

      <main class='wrapper'>
        <div class='stack gap-10 content'>
          <div class='featured-image-container'>
            <div class='gradient-wrapper'>
              <GradientPlaceholder
                title={entry.data.title}
                size='large'
                alt={entry.data.img_alt || entry.data.title}
              />
            </div>
          </div>
          <div class='content'>
            <Content />
          </div>
        </div>
      </main>
    </div>
    <ContactCTA />
  </div>
</BaseLayout>

<style>
  .project-header {
    @apply border-b py-8 border-customGray-800;
  }

  .back-link {
    @apply inline-flex items-center gap-2 py-2 px-4 rounded-lg transition-colors duration-200 ease-in-out no-underline text-customGray-300;
  }

  .back-link:hover {
    @apply bg-customGray-800 text-customGray-0;
  }

  .project-info {
    text-align: center;
    max-width: 70ch;
    margin: 0 auto;
  }

  .project-title {
    @apply text-3xl font-bold leading-[1.2] mb-4 text-customGray-0;
  }

  @media (min-width: 768px) {
    .project-title {
      font-size: 2.25rem;
    }
  }

  .tags {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
    justify-content: center;
    margin-bottom: 1.5rem;
  }

  .project-description {
    @apply text-lg leading-[1.6] text-customGray-300;
  }

  .content {
    max-width: 65ch;
    margin-inline: auto;
  }

  .content > :global(* + *) {
    margin-top: 1rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(img) {
    border-radius: 1.5rem;
    box-shadow: var(--shadow-sm);
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
  }

  .featured-image-container {
    width: 100%;
    max-width: 900px;
    margin-inline: auto;
    margin-bottom: 2rem;
  }

  .gradient-wrapper {
    width: 100%;
    height: 400px;
    position: relative;
    border-radius: 1.5rem;
    overflow: hidden;
  }

  .featured-image-container :global(.gradient-placeholder) {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 1.5rem;
    margin: 0 auto;
  }

  .content :global(blockquote) {
    @apply text-[var(--text-lg)] border-s-[0.25rem] border-[var(--accent-dark)] font-semibold leading-[1.1] ps-6 text-customGray-0;
  }

  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  /* Fallback for gradient text */
  @supports not (-webkit-background-clip: text) {
    .project-title {
      color: #667eea;
    }
  }

  @media (min-width: 50em) {
    .content :global(blockquote) {
      font-size: var(--text-2xl);
    }
  }
</style>
