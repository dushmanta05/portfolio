---
import type { iconPaths } from '@components/IconPaths';
import Icon from '@components/Icon.astro';
import ThemeToggle from '@components/ThemeToggle.astro';

const textLinks: { label: string; href: string }[] = [
  { label: 'Home', href: '/' },
  { label: 'Work', href: '/work/' },
  { label: 'About', href: '/about/' },
  { label: 'Blog', href: '/blog' },
];

const iconLinks: {
  label: string;
  href: string;
  icon: keyof typeof iconPaths;
}[] = [
  {
    label: 'GitHub',
    href: 'https://github.com/dushmanta05',
    icon: 'github',
  },
  {
    label: 'LinkedIn',
    href: 'https://www.linkedin.com/in/dushmanta05/',
    icon: 'linkedin',
  },
  {
    label: 'X',
    href: 'https://x.com/dushmanta05',
    icon: 'xLogo',
  },
];
---

<nav class='w-full max-w-[83rem] mx-auto px-6 gap-8 lg:gap-20 navbar'>
  <div class='max-w-7xl flex items-center justify-between h-16 mx-auto md:px-4 sm:px-6 lg:px-8'>
    <div class='flex-shrink-0'>
      <a href='/' class='brand-title'>
        <Icon icon='terminal' color=' var(--accent-regular)' size='1.6em' gradient />
        Dushmanta
      </a>
    </div>

    <!-- Desktop Navigation -->
    <div class='hidden md:flex flex-1 items-center justify-between'>
      <div class='flex-1 flex justify-center'>
        <ul class='flex items-center gap-1 list-none m-0 p-0'>
          {
            textLinks.map(({ label, href }) => (
              <li>
                <a
                  aria-current={Astro.url.pathname === href}
                  class:list={[
                    'nav-link',
                    {
                      active:
                        Astro.url.pathname === href ||
                        (href !== '/' && Astro.url.pathname.startsWith(href)),
                    },
                  ]}
                  href={href}
                >
                  {label}
                </a>
              </li>
            ))
          }
        </ul>
      </div>

      <div class='flex items-center gap-4'>
        <div class='flex items-center gap-2'>
          {
            iconLinks.map(({ href, icon, label }) => (
              <a href={href} class='social-link'>
                <span class='sr-only'>{label}</span>
                <Icon icon={icon} size='1.4em' />
              </a>
            ))
          }
        </div>
        <ThemeToggle />
      </div>
    </div>

    <!-- Mobile Menu Button -->
    <menu-button>
      <template>
        <button class='menu-toggle' aria-expanded='false'>
          <span class='sr-only'>Menu</span>
          <div class='hamburger w-6 h-5 relative'>
            <span class='top-0'></span>
            <span class='top-1/2 transform -translate-y-1/2'></span>
            <span class='bottom-0'></span>
          </div>
        </button>
      </template>
    </menu-button>
  </div>

  <!-- Mobile Menu Overlay -->
  <div id='mobile-menu' class='mobile-menu bg-white dark:bg-black/95' hidden>
    <div class='mobile-menu-header'>
      <a href='/' class='brand-title'>
        <Icon icon='terminal' color='var(--accent-regular)' size='1.6em' gradient />
        Dushmanta
      </a>
      <button class='close-menu' aria-label='Close menu'>
        <Icon icon='close' size='1.5em' />
      </button>
    </div>

    <div class='mobile-menu-content'>
      <ul class='mobile-nav-items'>
        {
          textLinks.map(({ label, href }) => (
            <li>
              <a
                aria-current={Astro.url.pathname === href}
                class:list={[
                  'mobile-nav-link',
                  {
                    active:
                      Astro.url.pathname === href ||
                      (href !== '/' && Astro.url.pathname.startsWith(href)),
                  },
                ]}
                href={href}
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>

      <div class='mobile-menu-footer'>
        <div class='mobile-socials'>
          {
            iconLinks.map(({ href, icon, label }) => (
              <a href={href} class='mobile-social-link'>
                <span class='sr-only'>{label}</span>
                <Icon icon={icon} size='1.2em' />
              </a>
            ))
          }
        </div>
        <div class='mobile-theme-toggle'>
          <ThemeToggle />
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      this.appendChild(this.querySelector('template')!.content.cloneNode(true));
      const btn = this.querySelector('button')!;
      const menu = document.getElementById('mobile-menu')!;
      const closeBtn = menu.querySelector('.close-menu')!;
      const body = document.body;

      menu.hidden = true;

      const setExpanded = (expand: boolean) => {
        btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
        menu.hidden = !expand;

        btn.classList.toggle('active', expand);

        if (expand) {
          body.style.overflow = 'hidden';
          body.style.position = 'fixed';
          body.style.width = '100%';
        } else {
          body.style.overflow = '';
          body.style.position = '';
          body.style.width = '';
        }
      };

      btn.addEventListener('click', () => setExpanded(menu.hidden));
      closeBtn.addEventListener('click', () => setExpanded(false));
      const navLinks = menu.querySelectorAll('.mobile-nav-link');
      navLinks.forEach((link) => {
        link.addEventListener('click', () => setExpanded(false));
      });

      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        if (e.matches) {
          setExpanded(false);
          btn.hidden = true;
        } else {
          btn.hidden = false;
        }
      };

      const mediaQueries = window.matchMedia('(min-width: 768px)');
      handleViewports(mediaQueries);
      mediaQueries.addEventListener('change', handleViewports);
    }
  }
  customElements.define('menu-button', MenuButton);
</script>

<style>
  .navbar {
    @apply fixed top-0 left-0 right-0 z-[9999] font-medium backdrop-blur-[2px];
    backdrop-filter: blur(32px);
    -webkit-backdrop-filter: blur(32px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
  }

  .nav-link {
    @apply px-4 py-2 text-sm font-medium no-underline rounded-full;
    @apply transition-all duration-200 ease-in-out;
    color: var(--gray-300);
    position: relative;
  }

  .nav-link:hover {
    color: var(--gray-0);
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(-1px);
  }

  .nav-link.active {
    color: var(--accent-text-over);
    background: var(--accent-regular);
    box-shadow: 0 4px 12px rgba(var(--accent-regular-rgb), 0.3);
  }

  .social-link {
    @apply p-2 rounded-full no-underline transition-all duration-200 text-custom-300 bg-[#ffffff0d];
  }

  .social-link:hover {
    color: var(--accent-regular);
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(-2px);
  }

  /* Mobile Menu Button */
  .menu-toggle {
    @apply md:hidden relative border-0 bg-transparent cursor-pointer;
    @apply transition-all duration-200;
    background: rgba(255, 255, 255, 0.1);
  }

  .menu-toggle:hover {
    background: rgba(255, 255, 255, 0.15);
  }

  .hamburger span {
    @apply block absolute h-0.5 w-full left-0 rounded-sm transition-all duration-300 bg-[--gray-0] origin-center;
  }

  .menu-toggle.active .hamburger span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .menu-toggle.active .hamburger span:nth-child(2) {
    opacity: 0;
  }

  .menu-toggle.active .hamburger span:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }

  .mobile-menu {
    @apply fixed inset-0 z-[9998] md:hidden;
    backdrop-filter: blur(24px);
    -webkit-backdrop-filter: blur(24px);
    animation: fadeIn 0.3s ease-out;
    height: 100vh;
    height: 100dvh;
    overflow: hidden;
  }

  .mobile-menu[hidden] {
    display: none;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .mobile-menu-header {
    @apply flex items-center justify-between p-4 border-b border-gray-800 bg-[--gray-999];
    flex-shrink: 0;
  }

  .brand-title {
    @apply flex items-center gap-2 text-xl font-bold no-underline;
    color: var(--gray-0);
    transition: color 0.3s ease;
  }
  .brand-title:hover {
    color: var(--accent-regular);
  }

  .close-menu {
    @apply border-0 bg-transparent cursor-pointer;
    @apply transition-all duration-200;
    color: var(--gray-0);
  }

  .close-menu:hover {
    color: var(--gray-0);
    background: rgba(255, 255, 255, 0.15);
  }

  .mobile-menu-content {
    @apply bg-[--gray-999];
    @apply flex flex-col px-4;
    height: calc(100vh - 80px);
    height: calc(100dvh - 80px);
    overflow-y: auto;
  }

  .mobile-nav-items {
    @apply flex-1 list-none m-0 p-0 space-y-2;
    padding-top: 2rem;
    padding-bottom: 2rem;
  }

  .mobile-nav-link {
    @apply block px-6 py-4 text-lg font-medium no-underline rounded-xl;
    @apply transition-all duration-200;
    color: var(--gray-300);
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .mobile-nav-link:hover {
    color: var(--gray-0);
    background: rgba(255, 255, 255, 0.1);
    transform: translateX(8px);
  }

  .mobile-nav-link.active {
    color: var(--accent-text-over);
    background: var(--accent-regular);
    box-shadow: 0 4px 20px rgba(var(--accent-regular-rgb), 0.3);
  }

  .mobile-menu-footer {
    @apply pt-6 border-t border-gray-800;
    flex-shrink: 0;
    margin-top: auto;
    padding-bottom: 2rem;
  }

  .mobile-socials {
    @apply flex justify-center gap-4 mb-6;
  }

  .mobile-social-link {
    @apply p-3 rounded-full no-underline transition-all duration-200;
    color: var(--gray-300);
    background: rgba(255, 255, 255, 0.1);
  }

  .mobile-social-link:hover {
    color: var(--accent-regular);
    background: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
  }

  .mobile-theme-toggle {
    @apply flex justify-center;
  }

  .sr-only {
    @apply absolute w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap border-0;
    clip: rect(0, 0, 0, 0);
  }

  :global(body) {
    padding-top: 4rem;
  }

  /* Enhanced backdrop filter support */
  @supports (backdrop-filter: blur(20px)) {
    .navbar {
      /* No background color - pure backdrop blur */
    }
  }

  @supports not (backdrop-filter: blur(20px)) {
    .navbar {
      background: rgba(0, 0, 0, 0.85);
    }
  }

  @media (prefers-color-scheme: dark) {
    .navbar {
      border-bottom-color: rgba(255, 255, 255, 0.05);
    }
  }

  @media (prefers-color-scheme: light) {
    .navbar {
      border-bottom-color: rgba(0, 0, 0, 0.08);
    }
  }

  @media (forced-colors: active) {
    .nav-link.active {
      color: SelectedItem;
    }
  }

  @media (max-width: 767px) {
    .mobile-menu {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      height: 100dvh;
    }
  }
</style>
