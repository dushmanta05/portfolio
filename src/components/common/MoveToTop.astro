---
import Icon from '@components/Icon.astro';

// MoveToTop.astro
---

<div id='move-to-top' class='move-to-top' aria-label='Scroll to top'>
  <div class='progress-ring'>
    <svg class='progress-ring-svg' width='56' height='56'>
      <circle
        class='progress-ring-background'
        stroke='currentColor'
        stroke-width='3'
        fill='transparent'
        r='26'
        cx='28'
        cy='28'></circle>
      <circle
        class='progress-ring-progress'
        stroke='currentColor'
        stroke-width='3'
        fill='transparent'
        r='26'
        cx='28'
        cy='28'></circle>
    </svg>
    <div class='arrow-icon'>
      <Icon icon='caretUp' color='#7f6df2' size='20px' />
    </div>
  </div>
  <div class='tooltip'>Back to top</div>
</div>

<style>
  .move-to-top {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    user-select: none;
  }

  .move-to-top.visible {
    opacity: 1;
    visibility: visible;
  }

  .progress-ring {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 56px;
    height: 56px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(12px);
    box-shadow:
      0 8px 32px rgba(0, 0, 0, 0.12),
      0 2px 8px rgba(0, 0, 0, 0.08);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .progress-ring:hover {
    transform: translateY(-2px);
    box-shadow:
      0 12px 48px rgba(0, 0, 0, 0.15),
      0 4px 16px rgba(0, 0, 0, 0.1);
    background: rgba(255, 255, 255, 0.98);
  }

  .progress-ring-svg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: rotate(-90deg);
    transform-origin: center center;
    border-radius: 50%;
  }

  .progress-ring-background {
    color: rgba(127, 109, 242, 0.2);
  }

  .progress-ring-progress {
    color: #7f6df2;
    stroke-dasharray: 163.36; /* 2 * Ï€ * 26 */
    stroke-dashoffset: 163.36;
    transition: stroke-dashoffset 0.1s ease-out;
  }

  .arrow-icon {
    position: relative;
    z-index: 1;
    color: #7f6df2;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s ease;
  }

  .progress-ring:hover .arrow-icon {
    transform: translateY(-1px);
  }

  .tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(-8px);
    background: rgba(17, 24, 39, 0.95);
    color: white;
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(12px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  }

  .tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-top-color: rgba(17, 24, 39, 0.95);
  }

  .move-to-top:hover .tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(-12px);
  }

  /* Dark theme styles */
  :root.theme-dark .progress-ring {
    background: rgba(17, 24, 39, 0.95);
    border-color: rgba(75, 85, 99, 0.3);
  }

  :root.theme-dark .progress-ring:hover {
    background: rgba(17, 24, 39, 0.98);
  }

  :root.theme-dark .tooltip {
    background: rgba(255, 255, 255, 0.95);
    color: rgba(17, 24, 39, 0.9);
  }

  :root.theme-dark .tooltip::after {
    border-top-color: rgba(255, 255, 255, 0.95);
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .move-to-top {
      bottom: 1.5rem;
      right: 1.5rem;
    }

    .progress-ring {
      width: 52px;
      height: 52px;
    }

    .progress-ring-svg {
      width: 52px;
      height: 52px;
      transform: rotate(-90deg);
      transform-origin: 26px 26px;
    }

    .progress-ring-background,
    .progress-ring-progress {
      r: 24;
      cx: 26;
      cy: 26;
    }

    .arrow-icon svg {
      width: 18px;
      height: 18px;
    }

    .tooltip {
      font-size: 0.8rem;
      padding: 6px 10px;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .move-to-top,
    .progress-ring,
    .arrow-icon,
    .tooltip,
    .progress-ring-progress {
      transition: none;
    }
  }
</style>

<script>
  class MoveToTopComponent {
    private moveToTopBtn: HTMLElement | null = null;
    private progressRing: SVGCircleElement | null = null;
    private circumference: number = 163.36;

    constructor() {
      this.init();
    }

    private init(): void {
      // Wait for DOM to be ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setup());
      } else {
        this.setup();
      }
    }

    private setup(): void {
      this.moveToTopBtn = document.getElementById('move-to-top');
      this.progressRing = document.querySelector('.progress-ring-progress');

      if (!this.moveToTopBtn || !this.progressRing) return;

      const isMobile = window.innerWidth <= 768;
      this.circumference = isMobile ? 150.8 : 163.36;

      this.progressRing.style.strokeDasharray = `${this.circumference}`;
      this.progressRing.style.strokeDashoffset = `${this.circumference}`;

      this.bindEvents();
      this.updateScrollProgress();
    }

    private bindEvents(): void {
      if (!this.moveToTopBtn) return;

      window.addEventListener(
        'scroll',
        this.throttle(() => {
          this.updateScrollProgress();
        }, 16)
      );

      this.moveToTopBtn.addEventListener('click', this.scrollToTop);

      this.moveToTopBtn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.scrollToTop();
        }
      });

      this.moveToTopBtn.setAttribute('tabindex', '0');
      this.moveToTopBtn.setAttribute('role', 'button');
    }

    private updateScrollProgress(): void {
      if (!this.moveToTopBtn || !this.progressRing) return;

      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = docHeight > 0 ? (scrollTop / docHeight) * 100 : 0;

      if (scrollTop > 300) {
        this.moveToTopBtn.classList.add('visible');
      } else {
        this.moveToTopBtn.classList.remove('visible');
      }

      const offset = this.circumference - (scrollPercent / 100) * this.circumference;
      this.progressRing.style.strokeDashoffset = `${offset}`;
    }

    private scrollToTop = (): void => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth',
      });
    };

    private throttle<T extends (...args: any[]) => any>(
      func: T,
      limit: number
    ): (...args: Parameters<T>) => void {
      let inThrottle: boolean;
      return function (this: any, ...args: Parameters<T>) {
        if (!inThrottle) {
          func.apply(this, args);
          inThrottle = true;
          setTimeout(() => (inThrottle = false), limit);
        }
      };
    }
  }

  new MoveToTopComponent();

  document.addEventListener('astro:page-load', () => {
    new MoveToTopComponent();
  });
</script>
