---
import Icon from '@components/Icon.astro';
---

<div id='move-to-top' class='move-to-top' aria-label='Scroll to top'>
  <div class='progress-ring'>
    <svg class='progress-ring-svg'>
      <circle class='progress-ring-progress'></circle>
    </svg>
    <div class='arrow-icon'>
      <Icon icon='caretUp' size='20px' />
    </div>
  </div>
  <div class='tooltip'>Back to top</div>
</div>

<style>
  .move-to-top {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    user-select: none;
  }

  .move-to-top.visible {
    opacity: 1;
    visibility: visible;
  }

  .progress-ring {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--svg-size);
    height: var(--svg-size);
    border-radius: 50%;
    background: transparent;
    box-shadow:
      0 8px 32px rgba(0, 0, 0, 0.12),
      0 2px 8px rgba(0, 0, 0, 0.08);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
  }

  .progress-ring::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 50%;
    background: hsla(var(--gray-999-basis), 0.5);
    backdrop-filter: blur(10px);
    z-index: -1;
    transition: background 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .progress-ring:hover::before {
    background: hsla(var(--gray-999-basis), 0.7);
  }

  .progress-ring-svg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: rotate(-90deg);
    transform-origin: center center;
    border-radius: 50%;
  }

  .progress-ring-background,
  .progress-ring-progress {
    fill: transparent;
    stroke-width: var(--stroke-width);
    r: var(--radius);
    cx: var(--center);
    cy: var(--center);
  }

  .progress-ring-progress {
    stroke: var(--accent-regular);
    transition: stroke-dashoffset 0.1s ease-out;
  }

  .arrow-icon {
    position: relative;
    z-index: 1;
    color: var(--accent-regular);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s ease;
  }

  .progress-ring:hover .arrow-icon {
    transform: translateY(-1px);
  }

  .tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(-8px);
    background: hsla(var(--gray-999-basis), 0.95);
    color: var(--gray-0);
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(12px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  }

  .tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-top-color: hsla(var(--gray-999-basis), 0.95);
  }

  .move-to-top:hover .tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(-12px);
  }

  /* Dark theme styles */
  :root.theme-dark .progress-ring {
    background: hsla(var(--gray-999-basis), 0.5);
  }

  :root.theme-dark .progress-ring:hover {
    background: hsla(var(--gray-999-basis), 0.7);
  }

  :root.theme-dark .tooltip {
    background: hsla(var(--gray-0-basis), 0.95);
    color: var(--gray-999);
  }

  :root.theme-dark .tooltip::after {
    border-top-color: hsla(var(--gray-0-basis), 0.95);
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .move-to-top {
      bottom: 1.5rem;
      right: 1.5rem;
    }

    .progress-ring {
      width: var(--svg-size-mobile);
      height: var(--svg-size-mobile);
    }

    .arrow-icon svg {
      width: 18px;
      height: 18px;
    }

    .tooltip {
      font-size: 0.8rem;
      padding: 6px 10px;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .move-to-top,
    .progress-ring,
    .arrow-icon,
    .tooltip,
    .progress-ring-progress {
      transition: none;
    }
  }
</style>

<script>
  class MoveToTopComponent {
    private moveToTopBtn: HTMLElement | null = null;
    private progressRing: SVGCircleElement | null = null;
    private circumference: number = 0;

    private readonly SVG_SIZE = 56;
    private readonly SVG_SIZE_MOBILE = 52;
    private readonly STROKE_WIDTH = 3;

    constructor() {
      this.init();
    }

    private get radius() {
      const size = window.innerWidth <= 768 ? this.SVG_SIZE_MOBILE : this.SVG_SIZE;
      return size / 2 - this.STROKE_WIDTH;
    }

    private get center() {
      const size = window.innerWidth <= 768 ? this.SVG_SIZE_MOBILE : this.SVG_SIZE;
      return size / 2;
    }

    private init(): void {
      if (typeof window === 'undefined') return;
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setup());
      } else {
        this.setup();
      }
    }

    private setup(): void {
      this.moveToTopBtn = document.getElementById('move-to-top');
      if (!this.moveToTopBtn) return;

      this.progressRing = this.moveToTopBtn.querySelector('.progress-ring-progress');
      if (!this.progressRing) return;

      const isMobile = window.innerWidth <= 768;
      const svgSize = isMobile ? this.SVG_SIZE_MOBILE : this.SVG_SIZE;
      const radius = svgSize / 2 - this.STROKE_WIDTH;
      const center = svgSize / 2;
      this.circumference = 2 * Math.PI * radius;

      this.moveToTopBtn.style.setProperty('--svg-size', `${this.SVG_SIZE}px`);
      this.moveToTopBtn.style.setProperty('--svg-size-mobile', `${this.SVG_SIZE_MOBILE}px`);
      this.moveToTopBtn.style.setProperty('--stroke-width', `${this.STROKE_WIDTH}px`);
      this.moveToTopBtn.style.setProperty('--radius', `${radius}px`);
      this.moveToTopBtn.style.setProperty('--center', `${center}px`);

      this.progressRing.style.strokeDasharray = `${this.circumference}`;
      this.progressRing.style.strokeDashoffset = `${this.circumference}`;

      this.bindEvents();
      this.updateScrollProgress();
    }

    private bindEvents(): void {
      if (!this.moveToTopBtn) return;

      window.addEventListener(
        'scroll',
        this.throttle(() => {
          this.updateScrollProgress();
        }, 16)
      );

      this.moveToTopBtn.addEventListener('click', this.scrollToTop);

      this.moveToTopBtn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.scrollToTop();
        }
      });

      this.moveToTopBtn.setAttribute('tabindex', '0');
      this.moveToTopBtn.setAttribute('role', 'button');
    }

    private updateScrollProgress = () => {
      if (!this.moveToTopBtn || !this.progressRing) return;

      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = docHeight > 0 ? scrollTop / docHeight : 0;

      if (scrollTop > 300) {
        this.moveToTopBtn.classList.add('visible');
      } else {
        this.moveToTopBtn.classList.remove('visible');
      }

      const offset = this.circumference * (1 - scrollPercent);
      this.progressRing.style.strokeDashoffset = `${offset}`;
    };

    private scrollToTop = (): void => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth',
      });
    };

    private throttle<T extends (...args: any[]) => any>(
      func: T,
      limit: number
    ): (...args: Parameters<T>) => void {
      let inThrottle: boolean;
      return (...args: Parameters<T>) => {
        if (!inThrottle) {
          func.apply(this, args);
          inThrottle = true;
          setTimeout(() => (inThrottle = false), limit);
        }
      };
    }
  }

  if (typeof window !== 'undefined') {
    new MoveToTopComponent();

    document.addEventListener('astro:page-load', () => {
      new MoveToTopComponent();
    });
  }
</script>
